// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

namespace UnicFormatos.Models {
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Globalization;
    using System;
    using Microsoft.EntityFrameworkCore;
    using Newtonsoft.Json.Converters;
    using Newtonsoft.Json;

    public class CareerContext : DbContext {
        public DbSet<Inscripcion> Careers { get; set; }
        protected override void OnConfiguring (DbContextOptionsBuilder optionsBuilder) {
            optionsBuilder.UseSqlite ("Data Source=inscripcion.db");
        }

        protected override void OnModelCreating (ModelBuilder builder) {
            //builder.Entity<
            builder.Entity<Inscripcion> ().ToTable ("Inscripcion");
        }
    }

    public partial class Inscripcion {
        [JsonProperty ("matricula")]
        [JsonConverter (typeof (ParseStringConverter))]
        [Key]
        public long Matricula { get; set; }

        [JsonProperty ("licenciatura")]
        public string Licenciatura { get; set; }

        [JsonProperty ("semestre")]
        public string Semestre { get; set; }

        [JsonProperty ("generacion")]
        [JsonConverter (typeof (ParseStringConverter))]
        public long Generacion { get; set; }

        [JsonProperty ("personal")]
        public Personal Personal { get; set; }

        [JsonProperty ("domicilio")]
        public Inscripcion_Domicilio Domicilio { get; set; }

        [JsonProperty ("padre")]
        public Familiar Padre { get; set; }

        [JsonProperty ("madre")]
        public Familiar Madre { get; set; }

        [JsonProperty ("emergencia")]
        public Emergencia Emergencia { get; set; }

        [JsonProperty ("trabajo")]
        public Trabajo Trabajo { get; set; }
    }

    [Owned]
    public partial class Inscripcion_Domicilio {

        [JsonProperty ("calle")]
        public string Calle { get; set; }

        [JsonProperty ("numero")]
        [JsonConverter (typeof (ParseStringConverter))]
        public long Numero { get; set; }

        [JsonProperty ("colonia")]
        public string Colonia { get; set; }

        [JsonProperty ("municipio")]
        public string Municipio { get; set; }

        [JsonProperty ("poblacion")]
        public string Poblacion { get; set; }

        [JsonProperty ("cp")]
        [JsonConverter (typeof (ParseStringConverter))]
        public long Cp { get; set; }

        [JsonProperty ("estado")]
        public string Estado { get; set; }
    }

    [Owned]
    public partial class Emergencia {

        [JsonProperty ("contacto")]
        public Familiar Contacto { get; set; }

        [JsonProperty ("tipoSangre")]
        public string TipoSangre { get; set; }
    }

    [Owned]
    public partial class Familiar {

        [JsonProperty ("contacto")]
        public Contacto Contacto { get; set; }

        [JsonProperty ("parentesco")]
        public string Parentesco { get; set; }

        [JsonProperty ("nombre")]
        public string Nombre { get; set; }

        [JsonProperty ("domicilio")]
        public string Domicilio { get; set; }

        [JsonProperty ("empresa")]
        public string Empresa { get; set; }
    }

    [Owned]
    public partial class Contacto {

        [JsonProperty ("telParticular")]
        public string TelParticular { get; set; }

        [JsonProperty ("telCelular")]
        public string TelCelular { get; set; }

        [JsonProperty ("email")]
        public string Email { get; set; }
    }

    [Owned]
    public partial class Personal {

        [JsonProperty ("nombre")]
        public string Nombre { get; set; }

        [JsonProperty ("apPaterno")]
        public string ApPaterno { get; set; }

        [JsonProperty ("apMaterno")]
        public string ApMaterno { get; set; }

        [JsonProperty ("nacionalidad")]
        public string Nacionalidad { get; set; }

        [JsonProperty ("lugarNacimiento")]
        public string LugarNacimiento { get; set; }

        [JsonProperty ("contacto")]
        public Contacto Contacto { get; set; }

        [JsonProperty ("fechaNacimiento")]
        public FechaNacimiento FechaNacimiento { get; set; }
    }

    [Owned]
    public partial class FechaNacimiento {

        [JsonProperty ("year")]
        public long Year { get; set; }

        [JsonProperty ("month")]
        public long Month { get; set; }

        [JsonProperty ("day")]
        public long Day { get; set; }
    }

    [Owned]
    public partial class Trabajo {

        [JsonProperty ("nombre")]
        public string Nombre { get; set; }

        [JsonProperty ("telefono")]
        public string Telefono { get; set; }

        [JsonProperty ("domicilio")]
        public TrabajoDomicilio Domicilio { get; set; }
    }

    [Owned]
    public partial class TrabajoDomicilio {

        [JsonProperty ("calle")]
        public string Calle { get; set; }

        [JsonProperty ("numero")]
        public long Numero { get; set; }

        [JsonProperty ("colonia")]
        public string Colonia { get; set; }

        [JsonProperty ("municipio")]
        public string Municipio { get; set; }
    }

    public partial class Inscripcion {
        public static Inscripcion FromJson (string json) => JsonConvert.DeserializeObject<Inscripcion> (json, UnicFormatos.Models.Converter.Settings);
    }

    public static class Serialize {
        public static string ToJson (this Inscripcion self) => JsonConvert.SerializeObject (self, UnicFormatos.Models.Converter.Settings);
    }

    internal static class Converter {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter {
        public override bool CanConvert (Type t) => t == typeof (long) || t == typeof (long?);

        public override object ReadJson (JsonReader reader, Type t, object existingValue, JsonSerializer serializer) {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string> (reader);
            long l;
            if (Int64.TryParse (value, out l)) {
                return l;
            }
            throw new Exception ("Cannot unmarshal type long");
        }

        public override void WriteJson (JsonWriter writer, object untypedValue, JsonSerializer serializer) {
            if (untypedValue == null) {
                serializer.Serialize (writer, null);
                return;
            }
            var value = (long) untypedValue;
            serializer.Serialize (writer, value.ToString ());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter ();
    }
}